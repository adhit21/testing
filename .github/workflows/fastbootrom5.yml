name: MIUI Firmware Fastboot Extractor v5

on:
  workflow_dispatch:
    inputs:
      download_url:
        description: 'URL file firmware'
        required: true
        type: string
      boot_img:
        description: 'Include boot.img?'
        required: false
        default: false
        type: boolean
      system_img:
        description: 'Include system.img?'
        required: false
        default: false
        type: boolean
      logo_bin:
        description: 'Include logo.bin?'
        required: false
        default: false
        type: boolean
      dtbo_img:
        description: 'Include dtbo.img?'
        required: false
        default: false
        type: boolean
      vbmeta_img:
        description: 'Include vbmeta.img?'
        required: false
        default: false
        type: boolean
      scatter_txt:
        description: 'Include scatter.txt?'
        required: false
        default: false
        type: boolean

jobs:
  extract-firmware:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y unzip zip curl tar jq

    - name: Extract metadata from URL
      id: extract_meta
      run: |
        URL="${{ github.event.inputs.download_url }}"
        VERSION=$(echo "$URL" | sed -n 's|.*/\(V[^/]*\)/.*|\1|p')
        CODENAME=$(echo "$URL" | sed -n 's|.*/\(.*\)_global_images.*|\1|p')
        if [ -z "$VERSION" ] || [ -z "$CODENAME" ]; then
          echo "::error::Gagal ekstrak metadata dari URL!"
          exit 1
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "codename=$CODENAME" >> $GITHUB_OUTPUT

    - name: Download and extract firmware
      run: |
        curl -L "${{ github.event.inputs.download_url }}" -o firmware.tgz
        mkdir -p output
        tar -xvzf firmware.tgz -C output

    - name: Package and filter assets
      id: package_assets
      run: |
        TAG="${{ steps.extract_meta.outputs.codename }}-${{ steps.extract_meta.outputs.version }}"
        declare -a NAMES=()

        # Kumpulkan pilihan file
        [[ "${{ github.event.inputs.boot_img }}" == 'true' ]] && NAMES+=("boot.img")
        [[ "${{ github.event.inputs.system_img }}" == 'true' ]] && NAMES+=("system.img")
        [[ "${{ github.event.inputs.logo_bin }}" == 'true' ]] && NAMES+=("logo.bin")
        [[ "${{ github.event.inputs.dtbo_img }}" == 'true' ]] && NAMES+=("dtbo.img")
        [[ "${{ github.event.inputs.vbmeta_img }}" == 'true' ]] && NAMES+=("vbmeta.img")
        [[ "${{ github.event.inputs.scatter_txt }}" == 'true' ]] && NAMES+=("scatter.txt")

        if [ ${#NAMES[@]} -eq 0 ]; then
          echo "::error::Tidak ada file yang dipilih untuk diproses."
          exit 1
        fi

        MISSING=()
        for NAME in "${NAMES[@]}"; do
          ZIP_NAME="${NAME}_${{ steps.extract_meta.outputs.version }}.zip"

          # Cek asset di GitHub Release
          if curl -s -H "Authorization: token $GITHUB_TOKEN" \
               "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG" \
             | jq -e --arg name "$ZIP_NAME" '.assets[] | select(.name == $name)' >/dev/null; then
            echo "⏭️ Skip existing: $ZIP_NAME"
          else
            FILE_PATH=$(find output -type f -name "$NAME" | head -n1)
            if [ ! -f "$FILE_PATH" ]; then
              echo "::error::File $NAME tidak ditemukan dalam firmware"
              exit 1
            fi
            zip "$ZIP_NAME" "$FILE_PATH"
            MISSING+=("$ZIP_NAME")
          fi
        done

        if [ ${#MISSING[@]} -eq 0 ]; then
          echo "Semua asset yang dipilih sudah tersedia di release. Batal."
          exit 1
        fi

        echo "upload_files<<EOF" >> $GITHUB_OUTPUT
        printf '%s\n' "${MISSING[@]}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Upload ke GitHub Releases
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "${{ steps.extract_meta.outputs.codename }}-${{ steps.extract_meta.outputs.version }}"
        name: "${{ steps.extract_meta.outputs.codename }} ${{ steps.extract_meta.outputs.version }}"
        files: |
          ${{ steps.package_assets.outputs.upload_files }}
        draft: false
        prerelease: false
        generate_release_notes: true
        create_release: true
